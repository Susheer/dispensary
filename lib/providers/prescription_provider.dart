import 'package:dispensary/models/medicine_model.dart';
import 'package:dispensary/models/prescription_model.dart';
import 'package:dispensary/services/database_service.dart';
import 'package:flutter/material.dart';

class PrescriptionProvider extends ChangeNotifier {
  final DatabaseService _databaseService;
  PrescriptionProvider(this._databaseService);

  // Prescription CRUD methods
  Future<void> storePrescriptionAndLines(Prescription prescription) async {
    // Start the transaction
    await _databaseService.db.transaction((txn) async {
      try {
        // Remove sysPrescriptionId as it will be auto-generated by the database
        final Map<String, dynamic> prescriptionWithoutId =
            prescription.toMapIgnoreSysId();

        final List<Map<String, dynamic>> listOfLines =
            prescriptionWithoutId['prescription_lines'];

        prescriptionWithoutId.remove('prescription_lines');
        // Store Prescription data
        await txn.insert('prescriptions', prescriptionWithoutId);

        // Retrieve the sysPrescriptionId of the inserted prescription
        final prescriptionId = await txn.query('prescriptions',
            orderBy: 'sys_prescription_id DESC', limit: 1);
        if (prescriptionId.isNotEmpty) {
          final sysPrescriptionId =
              prescriptionId.first['sys_prescription_id'] as int;

          // Store PrescriptionLine data
          for (final Map<String, dynamic> line in listOfLines) {
            line['medicine_id'] = line['medicine']['sys_medicine_id'];
            line.remove('medicine');
            // Set the sysPrescriptionId of the related prescription
            line['prescription_id'] = sysPrescriptionId;
            // Store PrescriptionLine data
            await txn.insert('prescription_line', line);
          }
        }
      } catch (error) {
        // If an error occurs, the transaction will be rolled back
        print('Error storing prescription and lines: $error');
        rethrow; // Rethrow the error to let the caller handle it
      }
    });
  }

  Future<List<Prescription>> getPrescriptionsByPatientIdWithDetails(
      int patientId) async {
    final List<Map<String, dynamic>> prescriptionsData =
        await _databaseService.db.query(
      'prescriptions',
      where: 'patient_id = ?',
      whereArgs: [patientId],
    );

    List<Prescription> prescriptions = [];
    for (final Map<String, dynamic> prescriptionData in prescriptionsData) {
      //final Prescription prescription = Prescription.fromMap(prescriptionData);
      int sysPrescriptionId = prescriptionData['sys_prescription_id'];
      // Fetch PrescriptionLines for each Prescription
      final List<Map<String, dynamic>> prescriptionLinesData =
          await _databaseService.db.query('prescription_line',
              where: 'prescription_id = ?', whereArgs: [sysPrescriptionId]);

      for (Map<String, dynamic> lineData in prescriptionLinesData) {
        final Medicine? medicine =
            await getMedicineById(lineData['medicine_id'] as int);
        if (medicine != null) {
          lineData['medicine'] = medicine;
        }
      }
      prescriptionData['prescription_lines'] = prescriptionLinesData;
      Prescription prescription = Prescription.fromMap(prescriptionData);
      prescriptions.add(prescription);
    }

    return prescriptions;
  }

  Future<Medicine?> getMedicineById(int sysMedicineId) async {
    List<Map<String, dynamic>> results = await _databaseService.db.query(
      'medicines',
      where: 'sys_medicine_id = ?',
      whereArgs: [sysMedicineId],
    );
    // Check if the results list is not empty
    if (results.isNotEmpty) {
      // Convert the result to a Patient object
      return Medicine.fromMap(results.first);
    }
  }
  // Future<int> insertPrescription(Prescription prescription) async {

  //   return await _databaseService.insert('prescriptions', prescription.toMap());
  // }

  // Future<List<Prescription>> getAllPrescriptions() async {
  //   final List<Map<String, dynamic>> maps =
  //       await _databaseService.query('prescriptions');
  //   return List.generate(maps.length, (i) => Prescription.fromMap(maps[i]));
  // }

  // Future<int> updatePrescription(Prescription prescription) async {
  //   return await _databaseService.update('prescriptions', prescription.toMap(),
  //       where: 'sys_prescription_id = ?',
  //       whereArgs: [prescription.sysPrescriptionId]);
  // }

  // Future<int> deletePrescription(int prescriptionId) async {
  //   return await _databaseService.delete('prescriptions',
  //       where: 'sys_prescription_id = ?', whereArgs: [prescriptionId]);
  // }

  // PrescriptionLine CRUD methods within PrescriptionProvider

  // Future<int> insertPrescriptionLine(PrescriptionLine prescriptionLine) async {
  //   return await _databaseService.insert(
  //       'prescription_lines', prescriptionLine.toMap);
  // }

  // Future<List<PrescriptionLine>> getAllPrescriptionLines() async {
  //   final List<Map<String, dynamic>> maps =
  //       await _databaseService.query('prescription_lines');
  //   return List.generate(maps.length, (i) => PrescriptionLine.fromMap(maps[i]));
  // }

  // Future<int> updatePrescriptionLine(PrescriptionLine prescriptionLine) async {
  //   return await _databaseService.update(
  //       'prescription_lines', prescriptionLine.toMap(),
  //       where: 'sys_prescription_line_id = ?',
  //       whereArgs: [prescriptionLine.sysPrescriptionLineId]);
  // }

  // Future<int> deletePrescriptionLine(int prescriptionLineId) async {
  //   return await _databaseService.delete('prescription_lines',
  //       where: 'sys_prescription_line_id = ?', whereArgs: [prescriptionLineId]);
  // }
}
